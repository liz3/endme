#ifndef LANGUAGES_H
#define LANGUAGES_H

#include "highlighting.h"
#include <vector>
#include "la.h"
const std::vector<Language> LANGUAGES = {
    {"C/C++",
     {"char",
      "for",
      "while",
      "if",
      "int",
      "float",
      "long",
      "return",
      "double",
      "true",
      "false",
      "else",
      "void",
      "delete",
      "struct",
      "class",
      "case",
      "break",
      "const",
      "nullptr",
      "auto",
      "bool",
      "new",
      "auto*",
      "switch",
      "case",
      "typedef",
      "static",
      "enum",
      "sizeof",
      "offsetof",
      "continue",
      "using",
      "namespace",
      "reinterpret_cast",
      "static_cast",
      "dynamic_cast",
      "override",
      "virtual",
      "this",
      "unsigned"},
     {"#include", "public",   "private", "#ifdef",   "#define", "#endif",
      "#ifndef",  "#else",    "#if",     "size_t",   "int8_t",  "uint8_t",
      "int16_t",  "uint16_t", "int32_t", "uint32_t", "int64_t", "uint64_t",
      "char_t",   "char16_t", "char32_t"},
     "//",
     {"/*", "*/"},
     "\"'",
     '\\',
     {"cc", "h", "cpp", "hpp", "c"},
     " \t\n[]{}();:.,*-+/<>&="},
    {"JavaScript",
     {"async",        "null",         "undefined", "as",        "from",
      "abstract",     "arguments",    "await",     "boolean",   "break",
      "byte",         "case",         "catch",     "char",      "class",
      "const",        "continue",     "debugger",  "default",   "let",
      "delete",       "do",           "double",    "else",      "enum",
      "eval",         "export",       "extends",   "false",     "final",
      "finally",      "float",        "for",       "function",  "goto",
      "if",           "implements",   "import",    "in",        "instanceof",
      "int",          "interfacelet", "long",      "native",    "new",
      "null",         "package",      "private",   "protected", "public",
      "return",       "short",        "static",    "super",     "switch",
      "synchronized", "this",         "throw",     "throws",    "transient",
      "true",         "try",          "typeof",    "var",       "void",
      "volatile",     "while",        "with",      "yield"},
     {"process", "requestAnimationFrame", "window", "console", "Object",
      "Array", "Number", "String", "JSON", "Buffer", "require"},
     "//",
     {"/*", "*/"},
     "\"'`",
     '\\',
     {"js", "jsx", "mjs"}},
    {"Python",
     {"and",  "as",       "assert", "break",  "class", "continue", "def",
      "del",  "elif",     "else",   "except", "False", "finally",  "for",
      "from", "global",   "if",     "import", "in",    "is",       "lambda",
      "None", "nonlocal", "not",    "or",     "pass",  "raise",    "return",
      "True", "try",      "while",  "with",   "yield"},
     {"print", "dict", "range", "open"},
     "#",
     {"\"\"\"", "\"\"\""},
     "\"'",
     '\\',
     {"py"}},
    {"Go",
     {"break",    "default",     "func",   "interface", "select",
      "case",     "defer",       "go",     "map",       "struct",
      "chan",     "else",        "goto",   "package",   "switch",
      "const",    "fallthrough", "if",     "range",     "type",
      "continue", "for",         "import", "return",    "var"},
     {"append",    "bool",       "byte",   "cap",   "close",   "complex",
      "complex64", "complex128", "uint16", "copy",  "false",   "float32",
      "float64",   "imag",       "int",    "int8",  "int16",   "uint32",
      "int32",     "int64",      "iota",   "len",   "make",    "new",
      "nil",       "panic",      "uint64", "print", "println", "real",
      "recover",   "string",     "true",   "uint",  "uint8",   "uintptr"},
     "//",
     {"/*", "*/"},
     "\"'",
     '\\',
     {"go"}},
    {"TypeScript",
     {"async",       "await",   "break",    "case",       "catch",
      "class",       "const",   "continue", "debugger",   "default",
      "delete",      "do",      "else",     "enum",       "export",
      "extends",     "false",   "finally",  "for",        "function",
      "if",          "import",  "in",       "instanceof", "new",
      "null",        "return",  "super",    "switch",     "this",
      "throw",       "true",    "try",      "typeof",     "var",
      "void",        "while",   "with",     "as",         "implements",
      "interface",   "let",     "package",  "private",    "protected",
      "public",      "static",  "yield",    "any",        "boolean",
      "constructor", "declare", "get",      "module",     "require",
      "number",      "set",     "string",   "symbol",     "type",
      "from",        "of"},
     {"process", "requestAnimationFrame", "window", "console", "Object",
      "Array", "Number", "String", "JSON", "Buffer", "require"},
     "//",
     {"/*", "*/"},
     "\"'`",
     '\\',
     {"ts", "tsx"}},
    {"Dockerfile",
     {"CMD", "ENTRYPOINT", "RUN", "ADD", "COPY", "ENV", "EXPOSE", "FROM",
      "LABEL", "STOPSIGNAL", "USER", "VOLUME", "WORKDIR", "ONBUILD", "AS"},
     {},
     "#",
     {"", ""},
     "\"",
     '\\',
     {"dockerfile", "Dockerfile"}},
    {"Elixir",
     {"def",
      "defp",
      "defn",
      "defnp",
      "defguard",
      "defguardp",
      "defmacro",
      "defmacrop",
      "defdelegate",
      "defcallback",
      "defmacrocallback",
      "defmodule",
      "defprotocol",
      "defexception",
      "defimpl",
      "defstruct",
      "and",
      "in",
      "not",
      "or",
      "when",
      "alias",
      "import",
      "require",
      "use",
      "after",
      "case",
      "catch",
      "cond",
      "do",
      "else",
      "end",
      "fn",
      "for",
      "if",
      "quote",
      "raise",
      "receive",
      "rescue",
      "super",
      "throw",
      "try",
      "unless",
      "unquote_splicing",
      "unquote",
      "true",
      "false",
      "nil",
      "with"},
     {"__MODULE__", "__DIR__", "__ENV__", "__CALLER__", "__STACKTRACE__"},
     "#",
     {"", ""},
     "\"'",
     '\\',
     {"ex", "exs"}},
    {"Shell",
     {"if", "then", "do", "else", "elif", "while", "until", "for", "in", "esac",
      "fi", "fin", "fil", "done", "exit", "set", "unset", "export", "function"},
     {"ab",    "awk",     "bash",   "beep",    "cat",   "cc",      "cd",
      "chown", "chmod",   "chroot", "clear",   "cp",    "curl",    "cut",
      "diff",  "echo",    "find",   "gawk",    "gcc",   "get",     "git",
      "grep",  "hg",      "kill",   "killall", "ln",    "ls",      "make",
      "mkdir", "openssl", "mv",     "nc",      "node",  "npm",     "ping",
      "ps",    "restart", "rm",     "rmdir",   "sed",   "service", "sh",
      "shopt", "shred",   "source", "sort",    "sleep", "ssh",     "start",
      "stop",  "su",      "sudo",   "svn",     "tee",   "telnet",  "top",
      "touch", "vi",      "vim",    "wall",    "wc",    "wget",    "who",
      "write", "yes",     "zsh"},
     "#",
     {"", ""},
     "\"'",
     '\\',
     {"sh", "bash"}},
    {"JSON", {"true", "false", "null"}, {}, "", {"", ""}, "\"", '\\', {"json"}},
    {"Zig",
     {"const",       "var",      "if",          "else",
      "return",      "pub",      "undefined",   "null",
      "fn",          "false",    "true",        "void",
      "bool",        "usize",    "comptime",    "c_int",
      "i8",          "u8",       "i16",         "u16",
      "i32",         "u32",      "i64",         "u64",
      "struct",      "catch",    "unreachable", "defer",
      "break",       "switch",   "type",        "usingnamespace",
      "export",      "callconv", "for",         "while",
      "threadlocal", "orelse",   "or",          "and",
      "anyopaque",   "anytype"},
     {"@addrSpaceCast",
      "@addWithOverflow",
      "@alignCast",
      "@alignOf",
      "@as",
      "@atomicLoad",
      "@atomicRmw",
      "@atomicStore",
      "@bitCast",
      "@bitOffsetOf",
      "@bitSizeOf",
      "@breakpoint",
      "@mulAdd",
      "@byteSwap",
      "@bitReverse",
      "@offsetOf",
      "@call",
      "@cDefine",
      "@cImport",
      "@cInclude",
      "@clz",
      "@cmpxchgStrong",
      "@cmpxchgWeak",
      "@compileError",
      "@compileLog",
      "@constCast",
      "@ctz",
      "@cUndef",
      "@cVaArg",
      "@cVaCopy",
      "@cVaEnd",
      "@cVaStart",
      "@divExact",
      "@divFloor",
      "@divTrunc",
      "@embedFile",
      "@enumFromInt",
      "@errorFromInt",
      "@errorName",
      "@errorReturnTrace",
      "@errorCast",
      "@export",
      "@extern",
      "@fence",
      "@field",
      "@fieldParentPtr",
      "@floatCast",
      "@floatFromInt",
      "@frameAddress",
      "@hasDecl",
      "@hasField",
      "@import",
      "@inComptime",
      "@intCast",
      "@intFromBool",
      "@intFromEnum",
      "@intFromError",
      "@intFromFloat",
      "@intFromPtr",
      "@max",
      "@memcpy",
      "@memset",
      "@min",
      "@wasmMemorySize",
      "@wasmMemoryGrow",
      "@mod",
      "@mulWithOverflow",
      "@panic",
      "@popCount",
      "@prefetch",
      "@ptrCast",
      "@ptrFromInt",
      "@rem",
      "@returnAddress",
      "@select",
      "@setAlignStack",
      "@setCold",
      "@setEvalBranchQuota",
      "@setFloatMode",
      "@setRuntimeSafety",
      "@shlExact",
      "@shlWithOverflow",
      "@shrExact",
      "@shuffle",
      "@sizeOf",
      "@splat",
      "@reduce",
      "@src",
      "@sqrt",
      "@sin",
      "@cos",
      "@tan",
      "@exp",
      "@exp2",
      "@log",
      "@log2",
      "@log10",
      "@abs",
      "@floor",
      "@ceil",
      "@trunc",
      "@round",
      "@subWithOverflow",
      "@tagName",
      "@This",
      "@trap",
      "@truncate",
      "@Type",
      "@typeInfo",
      "@typeName",
      "@TypeOf",
      "@unionInit",
      "@Vector",
      "@volatileCast",
      "@workGroupId",
      "@workGroupSize",
      "@workItemId"},
     "//",
     {"/*", "*/"},
     "\"'",
     '\\',
     {"zig"}}};
inline const Language *has_language(const std::string &name,
                                    const std::string &ext) {
  for (const auto &language : LANGUAGES) {
    for (const auto &extension : language.fileExtensions) {
      if (extension == ext || name == extension)
        return &language;
    }
  }
  return nullptr;
}

#endif
